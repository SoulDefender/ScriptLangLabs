DROP TABLE IF EXISTS tasks_users;
DROP TABLE IF EXISTS white_list;
DROP TABLE IF EXISTS notification;
DROP TABLE IF EXISTS task;
DROP TABLE IF EXISTS user;

CREATE TABLE user (
  id INT (11) NOT NULL AUTO_INCREMENT,
  name VARCHAR (120) NOT NULL,
  email VARCHAR (80) NOT NULL,
  password VARCHAR (80) NOT NULL,
  status TINYINT NOT NULL DEFAULT 0,
  never_notify TINYINT NOT NULL DEFAULT 0,
  recoveryHash VARCHAR(80) DEFAULT NULL,
  PRIMARY KEY (id)
);

CREATE TABLE task (
  id INT(13) NOT NULL AUTO_INCREMENT,
  name VARCHAR(240) NOT NULL,
  end_time TIMESTAMP NOT NULL,
  priority INT(2) NOT NULL,
  description VARCHAR (3000) NOT NULL,
  id_creator INT(11),
  status INT(2) DEFAULT 1,
  PRIMARY KEY (id),
  FOREIGN KEY (id_creator) REFERENCES user(id)
  ON UPDATE CASCADE ON DELETE SET NULL
);

CREATE TABLE notification (
  id INT(14) NOT NULL AUTO_INCREMENT,
  message VARCHAR(360) NOT NULL,
  user_id INT(11) NOT NULL,
  time DATETIME NOT NULL,
  PRIMARY KEY (id),
  FOREIGN KEY (user_id) REFERENCES user(id)
  ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE white_list (
  user_id INT(11),
  allowed_id INT(11),
  PRIMARY KEY (user_id, allowed_id),
  FOREIGN KEY (user_id) REFERENCES user(id)
  ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY (allowed_id) REFERENCES user(id)
  ON UPDATE CASCADE ON DELETE CASCADE
 );

CREATE TABLE tasks_users (
  id INT(14) NOT NULL AUTO_INCREMENT,
  user_id INT(11) NOT NULL,
  task_id INT(13) NOT NULL,
  PRIMARY KEY (id),
  FOREIGN KEY (user_id) REFERENCES user(id)
  ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY (task_id) REFERENCES task(id)
  ON UPDATE CASCADE ON DELETE CASCADE
 );

INSERT INTO user VALUES(DEFAULT, 'Dmytro', 'aryox666@mail.ru', 'cc305f2c49b200f59161a274ffa8f6754b20f0e3:132a', 1, DEFAULT, DEFAULT);


